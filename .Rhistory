library(rcarbon)
library(here)
library(here)
source(here('src','sampleCounts.R'))
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
View(x)
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
cntMatrix = sampleCounts(x) #this will take a couple of minutes
png(file=here('figures','testPlot.png'),width = 480,height=480)
plotCntMat(cntMatrix)
dev.off()
x = read.csv(here('oxcalresults','MCMC_uniform_rerun.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
cntMatrix = sampleCounts(x) #this will take a couple of minutes
png(file=here('figures','testPlot1.png'),width = 480,height=480)
plotCntMat(cntMatrix)
dev.off()
# Load Required Libraries
library(readxl)
library(oxcAAR)
library(rcarbon)
library(readr)
library(here)
# Read 14C Dates
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";",na='n/a')
# Read bespoke R functions
source(here('src','oxcalScriptCreator.R'))
library(readxl)
library(oxcAAR)
library(rcarbon)
library(readr)
library(here)
# Read 14C Dates
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";",na='n/a')
# Read bespoke R functions
source(here('src','oxcalScriptCreator.R'))
# Create OxCalScript (and save it into oxcalscripts file)
oxcalScriptGen(id=dates$LabNumber,c14age=dates$C14,errors=dates$STD,group=NULL,site=dates$SiteID,fn=here('oxcalscripts','script.oxcal'),interval=100,mcnsim=5000,mcname="MCMC_uniform",model=c("uniform"))
View(dates)
View(dates)
# Create OxCalScript (and save it into oxcalscripts file)
oxcalScriptGen(id=dates$LabNumber,c14age=dates$C14,errors=dates$STD,group=NULL,site=dates$SiteID,fn=here('oxcalscripts','script.oxcal'),interval=100,mcnsim=5000,mcname="MCMC_uniform",model=c("uniform"))
# Run OxCalScript Locally (Notice this requires about 30-50 hours of processing)
#This will create an output (MCMC_uniform.csv) stored in a local temporary file (in Windows)
quickSetupOxcal()
oxcalscript <- read_file(here("oxcalscripts","script.oxcal"))
result_file <- executeOxcalScript(oxcalscript)
# Load Required Libraries
library(readxl)
library(oxcAAR)
library(rcarbon)
library(readr)
library(here)
# Read 14C Dates
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";",na='n/a')
# Read bespoke R functions
source(here('src','oxcalScriptCreator.R'))
# Create OxCalScript (and save it into oxcalscripts file)
oxcalScriptGen(id=dates$LabNumber,c14age=dates$C14,errors=dates$STD,group=NULL,site=dates$SiteID,fn=here('oxcalscripts','script.oxcal'),interval=100,mcnsim=5000,mcname="MCMC_uniform",model=c("uniform"))
# Run OxCalScript Locally (Notice this requires about 30-50 hours of processing)
#This will create an output (MCMC_uniform.csv) stored in a local temporary file (in Windows)
quickSetupOxcal()
oxcalscript <- read_file(here("oxcalscripts","script.oxcal"))
result_file <- executeOxcalScript(oxcalscript)
# Load Required Libraries
library(readxl)
library(oxcAAR)
library(rcarbon)
library(readr)
library(here)
# Read 14C Dates
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";",na='n/a')
# Read bespoke R functions
source(here('src','oxcalScriptCreator.R'))
# Create OxCalScript (and save it into oxcalscripts file)
oxcalScriptGen(id=dates$LabNumber,c14age=dates$C14,errors=dates$STD,group=NULL,site=dates$SiteID,fn=here('oxcalscripts','script.oxcal'),interval=100,mcnsim=5000,mcname="MCMC_uniform",model=c("uniform"))
# Run OxCalScript Locally (Notice this requires about 30-50 hours of processing)
#This will create an output (MCMC_uniform.csv) stored in a local temporary file (in Windows)
quickSetupOxcal()
oxcalscript <- read_file(here("oxcalscripts","script.oxcal"))
result_file <- executeOxcalScript(oxcalscript)
#Create the MCMC samples posteriors
mcmcoutput=read.csv(here("oxcalresults", "MCMC_uniform.csv"))
mcmcoutput = mcmcoutput[,-c(1,ncol(mcmcoutput))] #Remove unused columns
index=which(apply(mcmcoutput,1,max)>1950) #identify instances with posterior outside calibration range
mcmcoutput = mcmcoutput[-index,]
mcmcoutput = apply(mcmcoutput,2,BCADtoBP) # Convert to BP
View(mcmcoutput)
library(rcarbon)
library(here)
source(here('src','sampleCounts.R'))
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
cntMatrix = sampleCounts(x) #this will take a couple of minutes
png(file=here('figures','testPlot.png'),width = 480,height=480)
plotCntMat(cntMatrix)
dev.off()
library(rcarbon)
library(doParallel)
library(here)
# Load data
dates = read.csv(here("C14dates_Iberia.csv", header = T, sep=";"))
# Load data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";",na='n/a')
dates_cal<- calibrate(x=dates$C14,
errors=dates$STD, normalised=FALSE,
calMatrix=TRUE)
# Create the bin-width (here h = 100)
bin_width <- binPrep(sites=as.character(dates$Site),
ages=dates$C14, h=100)
# Setup SPD limits, computer cores and number of simulations
start_sumprob <- 9000
end_sumprob <- 2000
cores <- detectCores()
cores_utils <- 6
nsim=5000
#Iberia SPD (Null model = exponential). Notice that this takes a few hours of processing
Iberia_exp_h100 <- modelTest(dates_cal, errors=dates$STD, bins=bin_width,
nsim=nsim, runm=100,timeRange=c(start_sumprob,end_sumprob),raw = TRUE,
model="exponential",datenormalised=FALSE,ncores=cores_utils)
plot(Iberia_exp_h100, xlim=c(9000, 2000))
pan <-layout(matrix(c(1,1,2,2), ncol=2, byrow=TRUE), heights=c(4, 1))
par(mai=rep(0.64, 4))
layout.show(pan)
plot(Iberia_exp_h100, xlim=c(9000, 2000))
lines(Iberia_exp_h100$fit$calBP,Iberia_exp_h100$result$PrDens, type = "l", col="blue")
lines(Iberia_exp_h100$fit$calBP,Iberia_exp_h100$fit$PrDens,type="l",lty=2,col="red")
# insert plot title
title("Iberia SPD based on exponentinal null model")
mtext("null model: p.value < 0.001", side = 3, line = 0.25, cex = 0.80)
#insert legend
par(mai=c(0,0,0,0))
plot.new()
# panel.first = grid()
legend(x="center", ncol=5,legend=c("SPD","Conf. Interval", "Null model", "positive dev.","negative dev."),
col =c("blue","lightgrey","red","indianred","royalblue"),lty=c(1,1,2,1,1),
lwd=c(1,5,1,5,5),cex=0.72,xjust = -2)
png(file=here('figures','SPD_Plot.png'),width = 800,height=461)
library(rcarbon)
library(here)
library(dplyr)
source(here('src','markTest.R'))
# Read raw data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";")
sites_region = unique(select(dates,SiteID,Region))
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
x=x[4900:5000,] #run this only on 100 posterior samples
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Region
res=markTest(x=x,marks=marks,nsim=50)
View(x)
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
View(x)
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Region
head(marks)
marks
length(marks)
length(marks="West")
marks1="West"
sites_region
sites_region$Region=="East"
plot(sites_region$Region=="East")
plot(sites_region$Region=="West")
plot(sites_region$Region=="South")
length(sites_region$Region=="South")
length(sites_region$Region=="East")
marks = sites_region$Region
View(dates)
# Read raw data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";")
sites_region = unique(select(dates,SiteID,Subregions))
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
x=x[4900:5000,] #run this only on 100 posterior samples
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
x=x[4900:5000,] #run this only on 100 posterior samples
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Region
res=markTest(x=x,marks=marks,nsim=50)
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Subregions
res=markTest(x=x,marks=marks,nsim=50)
marks = sites_region$Subregions
x=x[4900:5000,] #run this only on 100 posterior samples
res=markTest(x=x,marks=marks,nsim=50)
library(rcarbon)
library(here)
library(dplyr)
source(here('src','markTest.R'))
res=markTest(x=x,marks=marks,nsim=50)
library(rcarbon)
library(here)
library(dplyr)
source(here('src','markTest.R'))
# Read raw data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";")
sites_region = unique(select(dates,SiteID,Subregions))
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Subregions
res=markTest(x=x,marks=marks,nsim=50)
png(file=here('figures','testPlotMarkTest.png'),width = 720,height=480)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
View(res)
res[["pValueList"]]
unique(marks)
length(unique(marks)
)
png(file=here('figures','testPlotMarkTest.png'),width = 720,height=480)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
1:length(unique(marks))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
res$pValueList
marks==unique(marks)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
plotMarkTest
png(file=here('figures','testPlotMarkTest.png'),width = 720,height=480)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
dev.off()
png(file=here('figures','testPlotMarkTesta.png'),width = 720,height=480)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
dev.off()
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mar=c(5,4,2,1),mfrow=c(2,3))
png(file=here('figures','testPlotMarkTesta.png'),width = 720,height=480)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
dev.off()
png(file=here('figures','testPlotMarkTesta.png'),width = 720,height=480)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
dev.off()
marks = sites_region$Subregions
marks
unique(marks)
library(rcarbon)
library(here)
library(dplyr)
source(here('src','markTest.R'))
# Read raw data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";")
sites_region = unique(select(dates,SiteID,Subregions))
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Subregions
res=markTest(x=x,marks=marks,nsim=50)
library(rcarbon)
library(here)
source(here('src','sampleCounts.R'))
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
cntMatrix = sampleCounts(x) #this will take a couple of minutes
png(file=here('figures','testPlot.png'),width = 480,height=480)
plotCntMat(cntMatrix)
dev.off()
library(rcarbon)
library(here)
library(dplyr)
source(here('src','markTest.R'))
# Read raw data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";")
sites_region = unique(select(dates,SiteID,Region))
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Region
res=markTest(x=x,marks=marks,nsim=50)
# Read raw data
dates = read.csv(here('data','C14dates_Iberia.csv'), sep=";")
sites_region = unique(select(dates,SiteID,Region))
# Read MCMC output
x = read.csv(here('oxcalresults','MCMC_uniform.csv'))
x = x[,-c(1,ncol(x))] # eliminate pass number and last column
# Reorder sites_region to match MCMC output
mcmc_sitenames = unlist(lapply(strsplit(colnames(x),'\\.'),function(x){x[[2]]}))
nsites = length(mcmc_sitenames)/2
sites_region=sites_region[match(mcmc_sitenames[seq(1,by=2,length.out = nsites)],sites_region$SiteID),]
marks = sites_region$Region
res=markTest(x=x,marks=marks,nsim=50)
png(file=here('figures','PlotMark.png'),width = 1000,height=600)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
dev.off()
?legend
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center", ncol=5,legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,2,1,1),
lwd=c(1,5,1,5,5),cex=0.72,xjust = -2)
legend(x="center", ncol=5,legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),
lwd=c(1,5,1,5,5),cex=0.72,xjust = -2)
legend(x="center", ncol=5,legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),
lwd=c(1,5,1,5,5),cex=0.72,xjust = -2)
legend(x="center", ncol=5,legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,2,1,1),
lwd=c(1,5,1,5,5),cex=0.72,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,2,1,1),
lwd=c(1,5,1,5,5),cex=0.72,xjust = 0.5)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,2,1,1),
lwd=c(1,5,1,5,5),cex=0.72,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=0.72,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1)
,cex=0.72,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=0.72,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=0.8,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=3,xjust = 0.5)
legend(x="center",legend=c("SPD","Conf. Interval", "positive dev.","negative dev."),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=1,xjust = 0.5)
legend(x="center",legend=c("Observed SPD","Null hypothesis (pan-regional trend)", "Positive deviation","Negative deviation"),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=1,xjust = 0.5)
legend(x="center",legend=c("Observed SPD","Null hypothesis (pan-regional trend)", "Positive deviation","Negative deviation"),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=0.8,xjust = 0.5)
png(file=here('figures','PlotMark.png'),width = 1000,height=600)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center",legend=c("Observed SPD","Null hypothesis (pan-regional trend)", "Positive deviation","Negative deviation"),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=0.8,xjust = 0.5)
dev.off()
png(file=here('figures','PlotMark.png'),width = 1000,height=600)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center",legend=c("Observed SPD","Null hypothesis (pan-regional trend)", "Positive deviation","Negative deviation"),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=1,xjust = 0.5)
dev.off()
png(file=here('figures','PlotMark.png'),width = 1000,height=600)
par(mar=c(5,4,2,1),mfrow=c(2,3))
for (i in 1:length(unique(marks)))
{
plotMarkTest(res,index=i,main=unique(marks)[i])
legend('topleft',legend=c(paste0('n=',sum(marks==unique(marks)[i])),paste0('P-Value=',round(res$pValueList[i],4))),bty='n',cex=1)
}
par(mai=c(0,0,0,0))
plot.new()
legend(x="center",legend=c("Observed SPD","Null hypothesis (pan-regional trend)", "Positive deviation","Negative deviation"),
col =c("black","lightgrey","indianred","royalblue"),lty=c(1,1,1,1),
lwd=c(1,5,5,5),cex=2,xjust = 0.5)
dev.off()
